#!/usr/bin/env python3
import logging
from argparse import ArgumentParser

from ai_client import AIClient


def configure_logger(debug: bool) -> None:
    logging.getLogger().setLevel(logging.DEBUG if debug else logging.INFO)
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s', datefmt='%H:%M:%S')


def create_argparser() -> ArgumentParser:
    argparser = ArgumentParser(description='Zappy AI', add_help=False)
    argparser.add_argument('-n', type=str, required=True, help='Name of the team.', metavar='name', dest='team_name')
    argparser.add_argument('-h', type=str, help='Machine of the server.',
                           metavar='machine', dest='machine', default='localhost')
    argparser.add_argument('-p', type=int, help='Port of the server.',
                           metavar='port', dest='port', default=4242)
    argparser.add_argument('-d', '--debug', action='store_true', help='Enable debug mode.', dest='debug')
    argparser.add_argument('-help', action='help', help='Show this help message and exit.')
    return argparser


if __name__ == '__main__':
    args = create_argparser().parse_args()
    configure_logger(args.debug)
    client = AIClient((args.machine, args.port), args.team_name)
    if not client.connect():
        raise RuntimeError('Could not connect to server.')
    logging.info('Connected to server, starting handshake...')
    client.start_handshake()
    logging.info(
        f'Handshake done, client is part of the team {client.team_name} with {client.team_available_slots} '
        f'available slots.'
    )
    client.live_until_dead()
    if not client.disconnect():
        raise RuntimeError('Couldn\'t disconnect from server.')
